# IPython log file

# Tue, 08 Nov 2016 17:16:49
get_ipython().magic('cd csc211')
# Tue, 08 Nov 2016 17:16:54
get_ipython().magic('logstart -ot sqlalchemy.log')
# Tue, 08 Nov 2016 17:19:51
import sqlalchemy
# Tue, 08 Nov 2016 17:20:22
sqlalchemy.__version__
#[Out]# '0.9.4'
# Tue, 08 Nov 2016 17:22:11
from sqlalchemy import create_engine 
# Tue, 08 Nov 2016 17:23:42
engine = create_engine ('sqlite:///:memory:', echo=True)
# Tue, 08 Nov 2016 17:30:42
from sqlalchemy.ext.declaratice import declarative_base
# Tue, 08 Nov 2016 17:30:56
from sqlalchemy.ext.declaratice 
# Tue, 08 Nov 2016 17:31:10
from sqlalchemy.ext.declarative import declarative_base
# Tue, 08 Nov 2016 17:31:27
Base = declarative_base()
# Tue, 08 Nov 2016 17:32:47
from sqlalchemy import Column, Integer, String 
# Tue, 08 Nov 2016 17:40:11
class User(Base):
    _tablename_ ='users'
    id = Column(Integer , primary_key= True)
    name = Column(String)
    fullname = Column(String)
    password = Column(String)
    def __repr__(self):
        return "<User(name='%s',fullname='%s', password = '%s')>"% (self.name, self.fullname, self.password)
    User.__table__
    
# Tue, 08 Nov 2016 18:01:16
class User(Base):
    _tablename_ ='myusers'
    id = Column(Integer , primary_key= True)
    name = Column(String)
    fullname = Column(String)
    password = Column(String)
    def __repr__(self):
        return "<User(name='%s',fullname='%s', password = '%s')>"% (self.name, self.fullname, self.password)
    User.__table__
    User.__table__
    Table('myuser', MetaData(bind=none),
    Column('id',Integer(), table=<users>,primary_key=True, nullable=False), 
    Column('name', String(), table=<users>),
    
    Column('fullname', String(), table=<users>),
    Column('password', String(), table=<users>), schema=None)
    	Base.metadata.create_all(engine)
    SELECT
    PRAGMA table_info("myusers")
    ()
    CREATE TABLE users ( id INTEGER NOT NULL, name VARCHAR,
    fullname VARCHAR,
    password VARCHAR,
    PRIMARY KEY (id)
    )
    ()
    COMMIT
    Column(String(50))
    from sqlalchemy import Sequence 
    Column(Integer, Sequence('user_id_seq'), primary_key=True)
    Class User(Base):
       __tablename__ = 'users'
       id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
       name = Column(String(50))
       fullname = Column(String(50))
       password = Column(String(12))
       
# Tue, 08 Nov 2016 19:02:24
class User(Base):
    _tablename_ ='myusers'
    id = Column(Integer , primary_key= True)
    name = Column(String)
    fullname = Column(String)
    password = Column(String)
    def __repr__(self):
        return "<User(name='%s',fullname='%s', password = '%s')>"% (self.name, self.fullname, self.password)
    User.__table__
    User.__table__
    Table('myuser', MetaData(bind=none),
    Column('id',Integer(), table=<users>,primary_key=True, nullable=False), 
    Column('name', String(), table=<users>),
    
    Column('fullname', String(), table=<users>),
    Column('password', String(), table=<users>), schema=None)
    	Base.metadata.create_all(engine)
    SELECT
    PRAGMA table_info("myusers")
    ()
    CREATE TABLE users ( id INTEGER NOT NULL, name VARCHAR,
    fullname VARCHAR,
    password VARCHAR,
    PRIMARY KEY (id)
    )
    ()
    COMMIT
    Column(String(50))
    from sqlalchemy import Sequence 
    Column(Integer, Sequence('user_id_seq'), primary_key=True)
    Class User(Base):
       __tablename__ = 'users'
       id = Column(Integer, Sequence('user_id_seq'), primary_key=True)
       name = Column(String(50))
       fullname = Column(String(50))
       password = Column(String(12))
        def __repr__(self):
           return "<User(name='%s', fullname='%s', password='%s')>" % (self.name, self.fullname, self.password)
       ed_user = User(name='ed', fullname='Ed Jones', password='edspassword')
       ed_user.name
       cd
       
# Tue, 08 Nov 2016 19:03:04
get_ipython().magic('cp sqlalchemy.log sqlalchemy.log.1')
# Tue, 08 Nov 2016 19:03:46
git add sqlalchemy.log.1
